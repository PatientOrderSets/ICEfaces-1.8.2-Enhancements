<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~  Version: MPL 1.1/GPL 2.0/LGPL 2.1
  ~
  ~  "The contents of this file are subject to the Mozilla Public License
  ~  Version 1.1 (the "License"); you may not use this file except in
  ~  compliance with the License. You may obtain a copy of the License at
  ~  http://www.mozilla.org/MPL/
  ~
  ~  Software distributed under the License is distributed on an "AS IS"
  ~  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  ~  License for the specific language governing rights and limitations under
  ~  the License.
  ~
  ~  The Original Code is ICEfaces 1.5 open source software code, released
  ~  November 5, 2006. The Initial Developer of the Original Code is ICEsoft
  ~  Technologies Canada, Corp. Portions created by ICEsoft are Copyright (C)
  ~  2004-2006 ICEsoft Technologies Canada, Corp. All Rights Reserved.
  ~
  ~  Contributor(s): _____________________.
  ~
  ~  Alternatively, the contents of this file may be used under the terms of
  ~  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"
  ~  License), in which case the provisions of the LGPL License are
  ~  applicable instead of those above. If you wish to allow use of your
  ~  version of this file only under the terms of the LGPL License and not to
  ~  allow others to use your version of this file under the MPL, indicate
  ~  your decision by deleting the provisions above and replace them with
  ~  the notice and other provisions required by the LGPL License. If you do
  ~  not delete the provisions above, a recipient may use your version of
  ~  this file under either the MPL or the LGPL License."
  ~
  -->

<renderer>
	<description>
		<![CDATA[<p>Render an HTML option list.</p><p>Decode Behavior</p><p>This section documents the decode behavior for all renderers
          that handle <code>UISelectMany</code> or <code>UISelectOne</code>
          components.</p><ul><p><a name="decodeMany">Decode Behavior for
          <code>UISelectMany</code> components</a></p><ul><p>Obtain the <code>Map</code> from the
            "requestParameterValuesMap" property of the
            <code>ExternalContext</code>.  If the <code>Map</code> contains
            an entry for the "clientId" of the component, pass the value of
            the entry, cast to a <code>String []</code>, to the
            <code>setSubmittedValue()</code> method of the component, which
            must be an <code>EditableValueHolder</code>.  If the
            <code>Map</code> does not contain an entry, create an empty
            <code>String</code> array and call
            <code>setSubmittedValue()</code> with it.</p></ul><p><a name="decodeOne">Decode Behavior for
          <code>UISelectOne</code> components</a></p><ul><p>Obtain the <code>Map</code> from the "requestParameterMap"
          property of the <code>ExternalContext</code>.  If there is a
          <code>Map</code> entry for the "clientId" property of the
          component, pass it to the <code>setSubmittedValue()</code> method
          of the component.</p></ul><p>Encode Behavior</p><ul><p>Render an HTML "select" element. Render the clientId of
          the component as the value of the "name" attribute.  If the "styleClass" 
          attribute is specified, render its value as the value of the "class" 
          attribute on the "select" element.  If the component is a 
          <code>UISelectMany</code> instance, render "multiple" as the value of the 
          "multiple" attribute.  If the "size" attribute is specified, render its 
          value as the value of the "size" attribute.  Otherwise use the number of 
          items as the value of the "size" attribute.</p></ul><p><a name="option">Rendering the "option" elements</a></p><ul><p>The only valid children of this component are
          <code>UISelectItem</code> or <code>UISelectItems</code> instances.
          Iterate over the children of this component, and accrue a list of
          <code>javax.faces.model.SelectItem</code> instances.  If the
          current child is a <code>UISelectItem</code> create a
          <code>SelectItem</code>instance from its <code>itemValue,
          itemLabel</code> and <code>itemDescription</code> properties, add
          it to the list.  If the current child is a
          <code>UISelectItems</code> instance, call its
          <code>getValue()</code> method.  If the result is a
          <code>SelectItem</code> bean, add it to the list.  If the result
          is an array of <code>SelectItem</code> beans, add each one t othe
          list.  If the result is a <code>Collection</code> of
          <code>SelectItem</code> beans, add each one to the list.  If the
          result isa <code>Map</code>, create a <code>SelectItem</code> bean
          for each entry in the <code>Map</code> using the key as the label,
          the value as the value, and <code>null</code> as the description.
          Iterate over the list of <code>SelectItem</code> beans.  If the
          current element is a <code>SelectItemGroup</code>, render an
          "optgroup" element with a "label" attribute, the value of which is
          the "label" property from the current element, then call
          <code>getSelectItems()</code> and render each element as below.
          If the current element is not a <code>SelectItemGroup</code>,
          render an "option" element.  Follow the conversion rules in the
          spec to obtain a renderable <code>String</code> from the "value"
          property of the current element, render that as the value of the
          "value" atribute.  Now it is time to see if the current element is
          the selected value.  call its
          <code>getSubmittedValue()</code> method, casting the result to an
          <code>Object []</code>, otherwise the component must be a
          <code>UISelectOne</code> instance, call its
          <code>getSubmittedValue()</code> method and create an <code>Object
          []</code> around the result.  If the resultant array is non-null,
          we look in the array for a value that, when we pass the renderable
          value to its <code>equals()</code> method, it returns
          <code>true</code>, meaning the current element is selected.  If
          the resultant array is <code>null</code>, if the component is a
          <code>UISelectMany</code>, call its <code>getValue()</code>
          method.  If the result is a <code>List</code> obtain the values in
          the list as an array.  Otherwise, the component must be a
          <code>UISelectOne</code> instance.  Call its
          <code>getValue()</code> method, which must be an Object array.
          Look for an element in the resultant array that, 1. when we pass
          the renderable value to its <code>equals()</code> method, it
          returns <code>true</code> , or 2. if the renderable value is null,
          and there is a null element in the array, also conclude that the
          current element is selected.  Otherwise the current element is not
          selected.  Now, if the current value is selected, write out an
          HTML boolean property "selected".  If the current
          SelectItem.isDisabled() returns true, render "disabled" as the
          value of the "disabled" attribute.</p></ul></ul>]]>
	</description>
	<component-family>javax.faces.SelectMany</component-family>

	<renderer-type>com.icesoft.faces.Listbox</renderer-type>

	<renderer-extension>
		<instance-name>selectManyListbox</instance-name>
		<is-container>true</is-container>
		<renders-children>true</renders-children>
		<tag-name>selectManyListbox</tag-name>
		<taglib-prefix>@taglib-prefix@</taglib-prefix>
		<taglib-uri>@taglib-uri@</taglib-uri>
	</renderer-extension>

</renderer>
