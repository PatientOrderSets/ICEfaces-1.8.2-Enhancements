#
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# "The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations under
# the License.
#
# The Original Code is ICEfaces 1.5 open source software code, released
# November 5, 2006. The Initial Developer of the Original Code is ICEsoft
# Technologies Canada, Corp. Portions created by ICEsoft are Copyright (C)
# 2004-2009 ICEsoft Technologies Canada, Corp. All Rights Reserved.
#
# Contributor(s): _____________________.
#
# Alternatively, the contents of this file may be used under the terms of
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"
# License), in which case the provisions of the LGPL License are
# applicable instead of those above. If you wish to allow use of your
# version of this file only under the terms of the LGPL License and not to
# allow others to use your version of this file under the MPL, indicate
# your decision by deleting the provisions above and replace them with
# the notice and other provisions required by the LGPL License. If you do
# not delete the provisions above, a recipient may use your version of
# this file under either the MPL or the LGPL License."
#
#

# Root Node menu
node.splashPage.title = ICEfaces Component Suite

# Standard Extended Components Menu
node.extendedComponents.label = Extended Components

# Standard Extended Components Submenu Items
node.textFields.label = Text Entry
node.textFields.title = Text Entry
node.selection.label = Selection
node.selection.title = Selection
node.buttonLinks.label = Buttons & Links
node.buttonLinks.title = Buttons & Links

# Custom Components Menu
node.customComponents.label = Custom Components

# Custom Components Submenu Items
node.components.label = Components
node.selectInputText.label = Autocomplete
node.selectInputText.title = Autocomplete
node.selectInputDate.label = Calendar
node.selectInputDate.title = Calendar
node.inputRichText.label = Rich Text
node.inputRichText.title = Rich Text
node.menuBar.label = Menu Bar
node.menuBar.title = Menu Bar
node.menuPopup.label = Menu Popup
node.menuPopup.title = Menu Popup
node.outputProgress.label = Progress Bar
node.outputProgress.title = Progress Bar
node.inputFile.label = File Upload
node.inputFile.title = File Upload
node.dragDrop.label = Drag & Drop
node.dragDrop.title = Drag & Drop
node.effects.label = Effects
node.effects.title = Effects
node.outputMedia.label = Media
node.outputMedia.title = Media Component
node.tree.label = Tree
node.tree.title = Tree Component
node.outputConnectionStatus.label = Connection Status
node.outputConnectionStatus.title = Connection Status
node.dataTableParent.Title= Table
node.dataTableParent.label= Table
node.dataTable.title = Data Table
node.dataScrolling.label = Data Paginator
node.dataScrolling.title = Data Paginator
node.commandSortHeader.label = Sortable Header
node.commandSortHeader.title = Sortable Header
node.rowSelector.label = Row Selection
node.rowSelector.title = Row Selection
node.expandableDataTable.label = Expandable Table
node.expandableDataTable.title = Expandable Table
node.dataExporter.label = Data Exporter
node.dataExporter.title = Data Exporter
node.columns.label = Columns
node.columns.title = Columns
node.grouping.label = Grouping
node.grouping.title = Grouping
node.resizable.label = Resizable Columns
node.resizable.title = Resizable Columns
node.outputChart.label = Charts
node.outputChart.title = Charts
node.gMap.label = Google Maps
node.gMap.title = Google Maps
node.outputResource.label = Download Resources
node.outputResource.title = Download Resources
node.setEventPhase.label = Set Event Phase
node.setEventPhase.title = Set Event Phase
# Layout Panels Components Menu
node.layoutPanels.label = Layout Panels

# Layout Panels Submenu Items
node.panelBorder.label = Border Panel
node.panelBorder.title = Border Panel
node.panelCollapsible.label =  Collapsible Panel
node.panelCollapsible.title = Collapsible Panel
node.panelPopup.label = Popup Panel
node.panelPopup.title = Popup Panel
node.panelConfirmation.label = Confirmation Panel
node.panelConfirmation.title = Confirmation Panel
node.panelPositioned.label =  Positioned Panel
node.panelPositioned.title = Positioned Panel
node.panelDivider.label = Split Pane Panel
node.panelDivider.title = Split Pane Panel
node.panelSeries.label = Series Panel
node.panelSeries.title = Series Panel
node.panelStack.label = Stacking Panel
node.panelStack.title = Stacking Panel
node.panelTabSetStatic.label = Static Tabset
node.panelTabSetStatic.title = Static Tabset
node.panelTabSetDynamic.label = Dynamic Tabset
node.panelTabSetDynamic.title = Dynamic Tabset
node.panelTooltip.label = Tooltip Panel
node.panelTooltip.title = Tooltip Panel

# theme changing area
# --- DO NOT TRANSLATE BEGIN ---
theme.title = Switch Theme
theme.rime.title = Rime
theme.xp.title = XP
theme.royale.title = Royale
# --- DO NOT TRANSLATE END ---

# Default tab titles - for each component
tabbedHeadings.description = Description
tabbedHeadings.tutorial = Tutorial
tabbedHeadings.demo = Demonstration
tabbedHeadings.source = Source
tabbedHeadings.source.iframeMessage = Iframe not support use this link to view source.
tabbedHeadings.docs = Documentation

# Shared between all demos
page.global.serverFeedback = Server-side Backing Bean Values\:

# Tree component example
page.tree.synopsis = The tree component displays hierarchical data as a "tree" of branches and leaf nodes.
page.tree.explanation = Move nodes up and down using the commandButtons at the bottom of the page.
page.tree.path.label = Path\:
page.tree.move.up.label = Move Up
page.tree.move.down.label = Move Down
page.tree.employee.id.label = Employee ID\:
page.tree.employee.name.label = Name\:
page.tree.employee.phone.label = Phone\:


# Tabbed Component Example
page.panelTabSet.persistantText = Text can be set to show on every tab
page.panelTabSet.tabVisibility = Tab Visibility\:
page.panelTabSet.tabFocus = Selected Tab\:
page.panelTabSet.tabPlacement = Tab Placement\:
page.panelTabSet.top = top
page.panelTabSet.bottom = bottom
page.panelTabSet.tab1 = Tab 1
page.panelTabSet.tab2 = Tab 2
page.panelTabSet.tab3 = Tab 3
page.panelTabSet.example.iceFaces.title = ICEfaces
page.panelTabSet.example.iceFaces.description = The industry's first standards-compliant AJAX based solution for rapidly creating all Java rich web applications that are easily maintained, extended, and scaled, at very low cost.
page.panelTabSet.example.iceBrowser.title = ICEbrowser
page.panelTabSet.example.iceBrowser.description = The most widely distributed Java browser in the world for rendering web content into Java enterprise applications.
page.panelTabSet.example.icePdf.title = ICEpdf
page.panelTabSet.example.icePdf.description = The leading Java PDF document rendering and viewing solution designed to be easily integrated into Java enterprise applications.
page.panelTabSet.static.synopsis = The panelTabSet is a container component which contains one or more panelTab components, which are also container components.
page.panelTabSet.static.instructions = Toggle the various panelTabSet settings to view various layout and control options.
page.panelTabSet.static.controls = Tab Set Panel Controls\:
page.panelTabSet.static.accessibility.chkBox1 = Click to show/hide Tab 1
page.panelTabSet.static.accessibility.chkBox2 = Click to show/hide Tab 2
page.panelTabSet.static.accessibility.chkBox3 = Click to show/hide Tab 3
page.panelTabSet.static.accessibility.focusRadio = Click to change the selected tab
page.panelTabSet.static.accessibility.placementRadio = Click to change the placement of the tabs
page.panelTabSet.static.accessibility.tabSetTitle = Static Tab Set
page.panelTabSet.static.accessibility.tabSetSummary = Renders a tabSet component consisting of three tabs.  Clicking on each tab will change the content shown.
page.panelTabSet.static.accessibility.tabOneTitle = Click to display Tab 1
page.panelTabSet.static.accessibility.tabTwoTitle = Click to display Tab 2
page.panelTabSet.static.accessibility.tabThreeTitle = Click to display Tab 3

page.panelTabSet.dynamic.synopsis = The panelTabSet is a container component which contains a dynamic set of panelTab components.
page.panelTabSet.dynamic.instructions = Use the controls to add and remove tabs from the tabset.
page.panelTabSet.dynamic.tabLabel = New Tab Label
page.panelTabSet.dynamic.tabContent = New Tab Content
page.panelTabSet.dynamic.addButton = Add Tab
page.panelTabSet.dynamic.removeTab = Remove Selected Tab
page.panelTabSet.dynamic.removeButton = Remove Tab
page.panelTabSet.dynamic.tabLabel.alt = Input Text Box used to input the label of a new tab.
page.panelTabSet.dynamic.tabLabel.title = Enter the label for the new tab
page.panelTabSet.dynamic.tabContent.title = Enter the content for the new tab
page.panelTabSet.dynamic.addButton.alt = Command Button that will add a new tab to the example.
page.panelTabSet.dynamic.addButton.title = Click to add a new tab
page.panelTabSet.dynamic.removeTab.title = Select a tab to remove
page.panelTabSet.dynamic.removeButton.alt = Command Button that will remove a selected tab from the example.
page.panelTabSet.dynamic.removeButton.title = Click to remove a tab
page.panelTabSet.dynamic.tabSetSummary = Tab Set consisting of dynamically created tabs.
page.panelTabSet.dynamic.tabSetTitle = Dynamic Tab Set
bean.panelTabSet.dynamic.labelString = Label
bean.panelTabSet.dynamic.contentString = Content
bean.panelTabSet.dynamic.default.label1 = Label1
bean.panelTabSet.dynamic.default.label2 = Label2
bean.panelTabSet.dynamic.default.content1 = Content1
bean.panelTabSet.dynamic.default.content2 = Content2

# Progress Bar Example
page.outputProgress.synopsis = The progress bar is an asynchronous component that can be used to indicate the progress of long running server processes.
page.outputProgress.description = Click on the start button to start a short server side process.
page.outputProgress.mode.label = Select Output Mode\:
page.outputProgress.mode.standard.label = Standard
page.outputProgress.mode.indeterminate.label = Indeterminate
page.outputProgress.alignment.label = Label Alignment\:
page.outputProgress.alignment.bottom.label = bottom left
page.outputProgress.alignment.bottomCenter.label = bottom center
page.outputProgress.alignment.bottomRight.label = bottom right
page.outputProgress.alignment.top.label = top left
page.outputProgress.alignment.topCenter.label  = top center
page.outputProgress.alignment.topRight.label  = top right
page.outputProgress.alignment.left.label = left
page.outputProgress.alignment.right.label = right
page.outputProgress.alignment.embedded.label = embedded
component.progressBar.status.progress.label = Custom "In Progress" label\:
component.progressBar.status.complete.label = Custom "Completed" label\:
page.outputProgress.start.label = Start

# Calendar Example
page.selectInputDate.synopsis = The selectInputDate component can be used to capture form data values in a way more intuitive to users then a simple input field.
page.selectInputDate.instructions = The example below shows how the component can be rendered as either calendar or pop calendar.
page.selectInputDate.subInstructions.label =
page.selectInputDate.nonPopup.label = Default Calendar\:
page.selectInputDate.popup.label = Popup Calendar\:
page.selectInputDate.popup.title = Calendar Component
page.selectInputDate.selectedDate.label = Selected Date\:
page.selectInputDate.comment.weekends = Weekends have dark gray backgrounds
page.selectInputDate.comment.august = August days are bold

# Panel Stack Example
page.panelStack.synopsis = The panelStack is a container component that contains multiple panel groups.  The selected panel is rendered by the componentall others are not.
page.panelStack.instructions = Click on a panelGroup to change the selected panel. 
page.panelStack.example.radio.label = Select Example\:
# --- DO NOT TRANSLATE BEGIN ---
page.panelStack.example.1.label = Auction Monitor
page.panelStack.example.1.value = auction
page.panelStack.example.1.img = /images/panelStack/auction-thumb.png
page.panelStack.example.1.url = http\://auctionmonitor.icefaces.org/auctionMonitor/
page.panelStack.example.2.label = Mobility
page.panelStack.example.2.value = mobility
page.panelStack.example.2.img = /images/panelStack/mobility-thumb.png
page.panelStack.example.2.url = http\://www.icefaces.org/main/demos/mobile-ajax.iface
page.panelStack.example.3.label = Time Zone
page.panelStack.example.3.value = timezone
page.panelStack.example.3.img = /images/panelStack/timezone-thumb.png
page.panelStack.example.3.url = http\://timezone.icefaces.org/timezone5/
page.panelStack.example.4.label = Address Form
page.panelStack.example.4.value = address
page.panelStack.example.4.img = /images/panelStack/address-thumb.png
page.panelStack.example.4.url = http\://address.icefaces.org/
# --- DO NOT TRANSLATE END ---

# Border layout
page.panelBorder.synopsis = A layout container that is divided into five named areas.  Each area's visibility can be configured as well as custom sizing and style via CSS.
page.panelBorder.description = Use the check boxes below to change the rendered state of the five panelBorder areas.
page.panelBorder.visibility.label = Panel Visibility
page.panelBorder.visibility.north.label = North
page.panelBorder.visibility.south.label = South
page.panelBorder.visibility.east.label = East
page.panelBorder.visibility.west.label = West
page.panelBorder.visibility.center.label = Center

# Input File Example
page.inputFile.synopsis = The inputFile component allows a users to upload a file the server.
page.inputFile.instructions = Browse for a file on your local system, then press the Upload button to upload the data to the server.
page.inputFile.upload.label = File Upload
page.inputFile.properties.label = File Properties
page.inputFile.properties.name.label = Name\:
page.inputFile.properties.type.label = Content Type\:
page.inputFile.properties.size.label = Size\:
page.inputFile.history.label = Uploaded Files
page.inputFile.history.name.label = Name
page.inputFile.history.size.label = Size
page.inputFile.history.content.label = Content Type
page.inputFile.history.remove.label = Delete
page.inputFile.messages.label = Messages\:

# Selection Tags Example
page.selection.instructions.text = Changing selection state triggers a partial submit.
page.selection.subInstructions.text = Make selections using the mouse or keyboard,\
  server-side bean values are displayed.
page.selection.server.users.label = New user\:
page.selection.server.component.label = Component type\:
page.selection.server.cars.label = Cars\:
page.selection.server.drink.label = Drink\:
page.selection.server.language.label = Languages\:
page.selection.server.country.label = Country\:
page.selection.server.cities.label = Cities\:
page.selection.users.label = New user\:
page.selection.drink.label = Drink\:

# --- DO NOT TRANSLATE BEGIN ---
bean.selection.drink.drink1.value = Coke
bean.selection.drink.drink2.value = Pepsi
bean.selection.drink.drink3.value = Sprite
bean.selection.drink.drink4.value = 7up
# --- DO NOT TRANSLATE END ---

page.selection.component.label = Select component type\:
bean.selection.component.comp1.value = I/O
bean.selection.component.comp2.value = Command
bean.selection.component.comp3.value = Selection

page.selection.language.label  = Language\:
# --- DO NOT TRANSLATE BEGIN ---
bean.selection.language.lang1.value = Java
bean.selection.language.lang2.value = C\#
bean.selection.language.lang3.value = C++
bean.selection.language.lang4.value = C
bean.selection.language.lang5.value = COBA
# --- DO NOT TRANSLATE END ---

page.selection.cars.label = Select Cars\:
bean.selection.cars.car1.value = Batmobile
bean.selection.cars.car2.value = A-Team Van
bean.selection.cars.car3.value = BMW Z4
bean.selection.cars.car4.value = El Chamino
bean.selection.cars.car5.value = Lincoln Continental

bean.selection.countryCities.label = Select country & cities\:
bean.selection.country1.value = Canada
bean.selection.country2.value = United States
bean.selection.country3.value = China
bean.selection.country4.value = United Kingdom
bean.selection.country5.value = Russia

bean.selection.country1.city1.value = Calgary
bean.selection.country1.city2.value = Vancouver
bean.selection.country1.city3.value = Toronto
bean.selection.country1.city4.value = Montreal
bean.selection.country1.city5.value = Ottawa

bean.selection.country2.city1.value = Seattle
bean.selection.country2.city2.value = San Francisco
bean.selection.country2.city3.value = Los Angeles
bean.selection.country2.city4.value = New York
bean.selection.country2.city5.value = Chicago

bean.selection.country3.city1.value = Beijing
bean.selection.country3.city2.value = Shanghai
bean.selection.country3.city3.value = Canton
bean.selection.country3.city4.value = Shenzhen
bean.selection.country3.city5.value = Hong Kong

bean.selection.country4.city1.value = London
bean.selection.country4.city2.value = Birmingham
bean.selection.country4.city3.value = Edinburgh
bean.selection.country4.city4.value = Liverpool
bean.selection.country4.city5.value = Cardiff

bean.selection.country5.city1.value = Moscow
bean.selection.country5.city2.value = St. Petersburgh
bean.selection.country5.city3.value = Kaliningrad
bean.selection.country5.city4.value = Vladivostok
bean.selection.country5.city5.value = Volgograd

# Text Fields Example
page.textFields.synopsis = The ICEfaces Component Suite provides enhanced implementations of JSF text input components.
page.textFields.directions = Pressing Enter or tabbing out of an input field triggers a partial submit\:
page.textFields.name = Name\:
page.textFields.password = Password\:
page.textFields.comments = Comments\:

# Buttons and Links Example
page.buttonsAndLinks.synopsis = The ICEfaces Component Suite provides enhanced implementations of standard JSF button and link components.
page.buttonsAndLinks.instructions = Click on any form element and view the respective backing bean value. 
page.buttonsAndLinks.inputTextLabel = Input Text\:
page.buttonsAndLinks.inputTextNote =  (Partial submit disabled.)
page.buttonsAndLinks.submitButtonLabel = Command Button\:
page.buttonsAndLinks.resetButtonLabel = Reset Button\:
page.buttonsAndLinks.resetButtonNote =   (Resets form. No submit.)
page.buttonsAndLinks.imageButtonLabel = Image Button\:
page.buttonsAndLinks.commandLinkLabel = Command Link\:
page.buttonsAndLinks.outputLinkLabel = Output Link\:
page.buttonsAndLinks.clickedLabel = Clicked\:
bean.buttonsAndLinks.submitButton = Submit button
bean.buttonsAndLinks.imageButton = Image Button
bean.buttonsAndLinks.commandLink = Command Link

# Autocomplete Example
page.selectInputText.synopsis = The selectInputText component provides an inputText component enhanced with auto-complete functionality.
page.selectInputText.instructions = Start typing, then select a value using the enter key or the mouse.
page.selectInputText.plainDirections = SelectInputText using selectItem as child for plain text.
page.selectInputText.htmlDirections = SelectInputText using facet as child to generate generic html.
page.selectInputText.resultCityLabel = City\:
page.selectInputText.resultStateLabel = State\:
page.selectInputText.resultCountyLabel = County\:
page.selectInputText.resultZipLabel = Zip\:
page.selectInputText.resultAreaCodeLabel = Area Code\:
bean.selectInputText.error.findingMatches = Error finding autocomplete matches
bean.selectInputText.info.initializingDictionary = initializing dictionary
bean.selectInputText.error.initializingDictionary = Error initializing dictionary
bean.selectInputText.error.retrievingRecords = Error retrieving records
bean.selectInputText.error.record = Error getting city list, not City objects
bean.selectInputText.error.recordIO = Error getting city list

# Drag and Drop Example
page.dragDrop.synopsis = Any panelGroup component can be configured to be draggable or a drop target. Drag and Drop events can be configured to execute server side logic.

page.dragDrop.instructions = Drag and Drop each item's respective icon to the shopping cart table to add it to your basket.
page.dragDrop.store.label = Store
page.dragDrop.store.name.label = Name\:
page.dragDrop.store.price.label = Price\:
page.dragDrop.store.quantity.label = Quantity\:
page.dragDrop.cart.desrc1.label = Shopping Cart
page.dragDrop.cart.desrc2.label = Click return to delete an item from cart
page.dragDrop.cart.image.label = Image
page.dragDrop.cart.name.label = Name
page.dragDrop.cart.price.label = Price
page.dragDrop.cart.quantity.label = Quantity
page.dragDrop.cart.cost.label = Cost
page.dragDrop.cart.returnItem.label = Return Item
page.dragDrop.cart.return.label = Return
page.dragDrop.cart.total.label = Total\:
page.dragDrop.cart.items.label = item(s)\:
page.dragDrop.cartZone.label = Drag store items to cart
page.dragDrop.cartZone.image.label = Shopping Cart

# Panel Series Example
page.panelSeries.synopsis = The panelSeries component will iterate over any Collection of objects.  Any child components of panelSeries will be stamped out for every iteration.
page.panelSeries.instructions = Add and remove employees from the panelSeries collection. 
page.panelSeries.dyamic.label = Employees\:
page.panelSeries.add.label = Add
page.panelSeries.add.title = Add Employee
page.panelSeries.remove.label = Remove
page.panelSeries.remove.title = Remove Employee
page.panelSeries.total.label = Total Employees
page.panelSeries.list.label = Employees

# Effects Example

page.effect.synopsis = The Extended Standard Components in the ICEfaces Component Suite provide special attributes that can be used to invoke effects on the components.
page.effect.instructions = Click on an Effect to activate it. 
page.effects.label = Effects
page.effects.example.label = ICEfaces Effects
page.effect.move.title = Move
page.effect.move.labels.mode = Mode\:
page.effect.move.labels.rel = Relative
page.effect.move.labels.abs = Absolute
page.effect.move.labels.x = X\:
page.effect.move.labels.y = Y\:
page.effect.labels.invoke = Invoke
page.effect.labels.reset = Reset
page.effect.appearFade.title = Appear & Fade
page.effect.appearFade.appear = Appear
page.effect.appearFade.fade = Fade
page.effect.highlight.title = Highlight
page.effect.highlight.labels.color = Highlight Color\:
page.effect.highlight.labels.red = Red
page.effect.highlight.labels.orange = Orange
page.effect.highlight.labels.yellow = Yellow
page.effect.highlight.labels.green = Green
page.effect.highlight.labels.blue = Blue
page.effect.highlight.labels.indigo = Indigo
page.effect.highlight.labels.violet = Violet
page.effect.highlight.labels.black = Black
page.effect.labels.shrink = Shrink
page.effect.labels.enlarge = Enlarge
page.effect.puff.title=Puff
page.effect.pulsate.title = Pulsate
page.effect.scale.title=Scale
page.effect.desc=ICEfaces effects provide all sorts of ways to manipulate the user interface.
page.effect.blind.title=Blind
page.effect.switchoff.title=Switch Off
page.effect.dropout.title=Drop Out
page.effect.shake.title=Shake
page.effect.slide.title=Slide
page.effect.squish.title=Squish
page.effect.grow.title=Grow
page.effect.shrink.title=Shrink
page.effect.fold.title=Fold

# Connection Status Example
page.connectionStatus.synopsis = The connection status component displays information about the status of the network connection between the client browser and the server.
page.connectionStatus.instructions = The component displays one of four possible states, which are as follows\:
page.connectionStatus.theme.label = Theme
page.connectionStatus.theme1.value = XP
page.connectionStatus.theme2.value = Royale
page.connectionStatus.theme3.value = Rime
page.connectionStatus.status1.value = Idle
page.connectionStatus.status2.value = Active
page.connectionStatus.status3.value = Caution
page.connectionStatus.status4.value = Disconnected

# Output Resource Example
page.outputResource.label = Download Resources
page.outputResource.synopsis = The Resource Download component provides a way to provide file, OutputStream, \
or custom resource types for users to download. The developer has the ability to dynamically control \
the file name, whether the resource is cached, as well as many other aspects of online resource provision.
page.outputResource.instructions = Click on the links below to download the resources.

# Menu Bar / Menu Popup Example
page.menuBar.synopsis =The menuBar component provides a robust menu system.
page.menuBar.orientation.label = Orientation\:
page.menuBar.orientation.horiz = Horizontal
page.menuBar.orientation.vert = Vertical
page.menuBar.instructions = In the box below, choose the orientation of the Menu Bar and then select a menu item.  The backing been value of the selected item will be reflected under "Server-side Backing Bean Values".
page.menuBar.selection = Menu Selection\:
page.menuBar.param = Param value\:

page.menuPopup.synopsis =The menuPopup component provides a robust popup menu system when a designated region is right-clicked.
page.menuPopup.description = Right click on either the text or image to view the popup menu.
page.menuPopup.text.example.label = ICEfaces leverages the entire standards-based Java EE ecosystem of tools and execution environments. Rich enterprise application features are developed in pure Java, and in a pure thin-client model. There are no Applets or proprietary browser plug-ins required. ICEfaces applications are JavaServer Faces (JSF) applications, so Java EE application development skills apply directly and Java developers are isolated from doing any JavaScript related development.
page.menuPopup.menu.label = Effects
page.menuPopup.menu.shake.label = Shake
page.menuPopup.menu.highligh.label = Highlight
page.menuPopup.menu.pulsate.label = Pulsate

# Popup Panel Example
page.panelPopup.synopsis = The panelPopup is a container component that renders a popup panel that hovers on top of a web page.
page.panelPopup.instructions = This component provides general popup window behavior such as draggable and modal, and the option to automatically center and position.
page.panelPopup.title = Popup Dialog
page.panelPopup.draggableMessage.label = Draggable Popup Message\:
page.panelPopup.modalMessage.label = Modal Popup Message\:
page.panelPopup.autoCentreLabel = Auto Centre\:
page.panelPopup.autoPositionLabel = Auto Position\:
page.panelPopup.defaultModalMessage = A modal message.
page.panelPopup.defaultDraggableMessage = A draggable message.
page.panelPopup.show.true = Hide
page.panelPopup.show.false = Show
page.panelPopup.modalName = Modal
page.panelPopup.draggableName = Draggable
page.panelPopup.closeImage = /images/popupclose.gif
page.panelPopup.closeText = Close

page.panelConfirmation.synopsis = This component renders a popup confirmation dialog.
page.panelConfirmation.instructions = This dialog will be displayed immediately after the event that triggered the operation (e.g. click, Enter-key press, etc.) while preventing the application from carrying out the requested operation until it is confirmed by the user.
page.panelConfirmation.dataInLabel = Save data\:
page.panelConfirmation.dataOutLabel = Delete data\:
page.panelConfirmation.message = Please confirm your intended action.
page.panelConfirmation.saveButtonLabel = Save
page.panelConfirmation.deleteButtonLabel = Delete
page.panelConfirmation.dataIn = New Data
page.panelConfirmation.dataOut = Saved Data
page.panelConfirmation.confirmationCheckboxLabel = With confirmation

page.dataTable.column1 = ID
page.dataTable.column2 = First Name
page.dataTable.column3 = Last Name
page.dataTable.column4 = Phone
page.dataTable.column5 = Region
page.dataTable.column6 = Office
page.dataTable.rowColspan = Contact Info
page.dataTable.misc = Misc.
page.dataTable.name = Name

# Split Pane Panel Example
page.panelDivider.synopsis = The panelDivider component creates a splittable panel. The divider is draggable and useful for displaying multiple sections of content.
page.panelDivider.description = The orientation of the divider can be changed between horizontal and vertical by selecting each radio button.
page.panelDivider.textblock1 = ICEfaces is an integrated Ajax application framework that enables Java EE application developers to easily create and deploy thin-client rich Internet applications (RIA) in pure Java. ICEfaces is a fully featured product that enterprise developers can use to develop new or existing Java EE applications at no cost.
page.panelDivider.textblock2 = ICEfaces leverages the entire standards-based Java EE ecosystem of tools and execution environments. Rich enterprise application features are developed in pure Java, and in a pure thin-client model. There are no Applets or proprietary browser plug-ins required. ICEfaces applications are JavaServer Faces (JSF) applications, so Java EE application development skills apply directly.
page.panelDivider.vertical.label = Vertical
page.panelDivider.horizontal.label = Horizontal
page.panelDivider.orientation.label = Divider Orientation\:


# grouping columns example
page.grouping.synopsis= Grouping of headers and data rows can be easily added to any dataTable with simple attributes and tags.
page.grouping.instructions = View the source code tab to see how easy grouping can be.
page.resizeableColumns.synopsis = DataTable column headers can be configured to  be dynamically resized by a user.
page.resizeableColumns.instructions = Use the mouse to select and drag a column header divider.  

#Expandable Table example
page.expandTable.synopsis = The dataTable's flexibility is demonstrated by manipulating the DataModel in the bean.
page.expandTable.description = Selecting the expand/contract icons will alter the DataModel on the server.  This triggers a render in the UI that expands or contracts the table rows.
page.expandTable.header1 = Description
page.expandTable.header2 = Date Modified
page.expandTable.header3 = Date Created
page.expandTable.header4 = Size
page.expandTable.header5 = Kind
page.expandTable.header6 = Version
# --- DO NOT TRANSLATE BEGIN ---
bean.expandTable.GROUP_INDENT_STYLE_CLASS = groupRowIndentStyle
bean.expandTable.GROUP_ROW_STYLE_CLASS = groupRowStyle
bean.expandTable.CHILD_INDENT_STYLE_CLASS = childRowIndentStyle
bean.expandTable.CHILD_ROW_STYLE_CLASS = childRowStyle
bean.expandTable.CONTRACT_IMAGE = tree_nav_top_close_no_siblings.gif
bean.expandTable.EXPAND_IMAGE = tree_nav_top_open_no_siblings.gif
# --- DO NOT TRANSLATE END ---
bean.expandTable.parentGroup1.description = Project Budget
bean.expandTable.parentGroup1.modified = 9-April, 1\:54 PM
bean.expandTable.parentGroup1.created = 8-Jan, 3\:41 PM
bean.expandTable.parentGroup1.size = 36kb
bean.expandTable.parentGroup1.kind = Folder
bean.expandTable.parentGroup1.version = --
bean.expandTable.parentGroup1.childGroup1.description = Software cost
bean.expandTable.parentGroup1.childGroup1.modified = 19-Feb, 6\:23 AM
bean.expandTable.parentGroup1.childGroup1.created = 10-Jan, 2\:22 PM
bean.expandTable.parentGroup1.childGroup1.size = 20kb
bean.expandTable.parentGroup1.childGroup1.kind = Document
bean.expandTable.parentGroup1.childGroup1.version = 1.1
bean.expandTable.parentGroup1.childGroup2.description = Stuff Salary
bean.expandTable.parentGroup1.childGroup2.modified = 10-Feb, 2\:10 PM
bean.expandTable.parentGroup1.childGroup2.created = 8-Feb, 4\:45 PM
bean.expandTable.parentGroup1.childGroup2.size = 16kb
bean.expandTable.parentGroup1.childGroup2.kind = Document
bean.expandTable.parentGroup1.childGroup2.version = 1.2
bean.expandTable.parentGroup2.description = Project Development
bean.expandTable.parentGroup2.modified = Today, 11\:35 AM
bean.expandTable.parentGroup2.created = 10-May, 3\:41 PM
bean.expandTable.parentGroup2.size = --
bean.expandTable.parentGroup2.kind = Folder
bean.expandTable.parentGroup2.version = --
bean.expandTable.parentGroup2.childGroup1.description = Prototype Readme.rtf
bean.expandTable.parentGroup2.childGroup1.modified = 22-May, 8\:25 AM
bean.expandTable.parentGroup2.childGroup1.created = 10-May, 3\:41 PM
bean.expandTable.parentGroup2.childGroup1.size = 20kb
bean.expandTable.parentGroup2.childGroup1.kind = Document
bean.expandTable.parentGroup2.childGroup1.version = --
bean.expandTable.parentGroup2.childGroup2.description = Prototype v1.0
bean.expandTable.parentGroup2.childGroup2.modified = 25-June, 9\:56 AM
bean.expandTable.parentGroup2.childGroup2.created = 8-June, 5\:55 PM
bean.expandTable.parentGroup2.childGroup2.size = 16kb
bean.expandTable.parentGroup2.childGroup2.kind = HTML
bean.expandTable.parentGroup2.childGroup2.version = --
bean.expandTable.parentGroup2.childGroup3.description = v1.0
bean.expandTable.parentGroup2.childGroup3.modified = Today, 11\:35 AM
bean.expandTable.parentGroup2.childGroup3.created = 2-July, 5\:32 PM
bean.expandTable.parentGroup2.childGroup3.size = --
bean.expandTable.parentGroup2.childGroup3.kind = Application
bean.expandTable.parentGroup2.childGroup3.version = --
bean.expandTable.parentGroup3.description = Training Course
bean.expandTable.parentGroup3.modified = Yesterday, 10\:10 AM
bean.expandTable.parentGroup3.created = 28-July, 11\:35 AM
bean.expandTable.parentGroup3.size = 4.6mb
bean.expandTable.parentGroup3.kind = Folder
bean.expandTable.parentGroup3.version = --
bean.expandTable.parentGroup3.childGroup1.description = ICEFaces Developer Guide
bean.expandTable.parentGroup3.childGroup1.modified = Yesterday, 15\:20 PM
bean.expandTable.parentGroup3.childGroup1.created = Yesterday, 11\:45 AM
bean.expandTable.parentGroup3.childGroup1.size = 4.6mb
bean.expandTable.parentGroup3.childGroup1.kind = Document
bean.expandTable.parentGroup3.childGroup1.version = --

# Columns example
page.columns.synopsis = Manipulating the second dimension of a DataTable.
page.columns.description = The ice\:columns component will dynamically generate columns of characters based on the number of columns entered below.
page.columns.selectonemenu.title = Number of Columns\:

# Chart example
page.outputChart.synopsis = The outputChart component uses the JCharts open source charting utility (http\://jcharts.sourceforge.net/) to create charts.
page.outputChart.description = Use the controls below to view the different chart types\:
page.outputChart.types.title = Chart Types\:

page.outputChart.orientation.label= Chart Orientation\:
page.outputChart.orientation.horiz.label = Horizontal
page.outputChart.orientation.vert.label = Vertical

page.outputChart.legend.visiblity.label= Chart Legend\:
page.outputChart.legend.visiblity.show.label = Show
page.outputChart.legend.visiblity.hide.label = Hide

page.outputChart.legend.position.label= Legend Position\:
page.outputChart.legend.position.bottom.label = Bottom
page.outputChart.legend.position.top.label = Top
page.outputChart.legend.position.left.label = Left
page.outputChart.legend.position.right.label = Right
page.outputChart.legend.position.none.label = None

page.outputChart.imageMap.label = Image Map Value\:
page.outputChart.data.label = Modify Data\:
page.outputChart.data.add.label = Add
page.outputChart.data.remove.label = Remove
page.outputChart.data.reset.label = Reset

# Positioned Panel Component
page.panelPositioned.synopsis = The positioned panel component generates a series of repeating child-components whose order can be changed by dragging.
page.panelPositioned.instruction = Use the mouse to move names in the Current Rank positioned panel component to change the rank.
page.panelPositioned.positionable.column.label = Edited Rank\:
page.panelPositioned.fixed.column.label = Current Rank\:

# Collapsible Panel Example
page.panelCollapsible.synopsis = This component allows the user to hide content and have it expand when the header is clicked.
page.panelCollapsible.description = Click on the headers to expand/contract the collapsible panel.
page.panelCollapsible.links.header = Links
page.panelCollapsible.form.header = Form
page.panelCollapsible.form.firstName = First Name\:
page.panelCollapsible.form.lastName = Last Name\:
page.panelCollapsible.form.phone = Phone\:
page.panelCollapsible.text.header = Text
page.panelCollapsible.text.description = The industry's first standards-compliant AJAX based solution for rapidly creating all Java rich web applications that are easily maintained, extended, and scaled, at very low cost.
page.panelCollapsible.image.header = Image
page.panelCollapsible.imageLink.header = Image Link

# Datapaginator
page.dataScrolling.synopsis = The dataTable can be configured to either scroll data or page data.
page.dataScrolling.description = Select a scrolling mechanism to apply to the dataTable.
page.scolling.none = None
page.scolling.scrolling = Scrolling
page.scolling.paging = Paging 
page.dataScrolling.outputFormat.text = {0} employee(s) found, displaying {1} employee(s), from {2} to {3}. Page {4} / {5}.
page.dataScrolling.firstpage = first page
page.dataScrolling.lastpage = last page
page.dataScrolling.previouspage = previous page
page.dataScrolling.nextpage = next page
page.dataScrolling.fastforward =  fast forward
page.dataScrolling.fastbackward = fast backward

# CommandSortHeader
page.commandSortHeader.synopsis = The commandSortHeader component is used in conjunction with a dataTable.
page.commandSortHeader.instructions = Click a column heading to sort the table.


# RowSelector
page.rowSelector.synopsis = The Row Selector tag enables row selection for DataTables.
page.rowSelector.instructions = Table rows can be selected and unselected with a mouse click.
page.rowSelector.results= Selected Rows
page.rowSelector.multiple = Enable multiple row selection
page.rowSelector.ItemSingle = Single
page.rowSelector.ItemMultiple = Multiple
page.rowSelector.ItemEnhancedMultiple = Enhanced Multiple
page.rowSelector.enhancedMultipleHeading = In enhangeMultiple mode:
page.rowSelector.enhancedMultipleDoc1 = -"Click" selects clicked row and deselects rest
page.rowSelector.enhancedMultipleDoc2 = -"Click + Ctrl" flip the selection of clicked row and keeps previous selection intact
page.rowSelector.enhancedMultipleDoc3 = -"Click + Shift" selects all rows from last clicked rows to newly clicked row, and deselect rest
page.rowSelector.enhancedMultipleDoc4 = -"Click + Shift + Ctrl" selects all rows from last clicked rows to newly clicked row and keeps previous selection intact

#DataExporter
page.dataExporter.synopsis =  The dataExporter can export data in various formats
page.dataExporter.description = Select a type to export data

# RichText
page.inputRichText.synopsis = The ICEfaces inputRichText component uses the FCKEditor API to provide a JSF based rich text component.
page.inputRichText.instructions = Click the save button to submit data to the server and display it below.
page.inputRichText.toolbar.title = Toolbar Mode\:
page.inputRichText.toolbar.basic = Basic
page.inputRichText.toolbar.default = Default
page.inputRichText.valuelabel = Saved text as HTML\:


# Gmap
page.gMap.synopsis = ICEfaces uses the Google Map API to provide map services.
page.gMap.description = Utilize the ice\:gMap component to geocode an address (the process of converting an address to longitude and latitude coordinates), search for a location, and toggle the visibility of the map controls or markers.
page.gMap.city.label = Select a City\:
page.gMap.address.label = Select an Address\:
page.gMap.controls.label = Show Controls\:
page.gMap.markers.label = Show Markers\:
page.gMap.search.select = --Select--
page.gMap.search.city1 = Tokyo
page.gMap.search.city2 = Mexico City
page.gMap.search.city3 = New York
page.gMap.search.city4 = Sao Paulo
page.gMap.search.city5 = Mumbai

# panelTooltip
page.panelTooltip.synopsis = The panelTooltip component is a container which can be triggered to appear when a mouse hovers over a hotzone for specific amount of time.
page.panelTooltip.description = The below example below shows a tooltip for eachpicture.  
page.panelTooltip.description2 = The below example uses one tooltip for all the provinces.  The tooltip content is updated when the display event is fired.
page.panelTooltip.hideType.label = Hide Mode
page.panelTooltip.onhide.mouseOut = Mouse Out
page.panelTooltip.onhide.mouseDown = Mouse Down
page.panelTooltip.onhide.none = None
page.panelTooltip.duration.label = Hover Delay\:
page.panelTooltip.duration.label1 = 0.5 second
page.panelTooltip.duration.label2 = 1.0 second
page.panelTooltip.duration.label3 = 1.5 seconds
page.panelTooltip.displayOn.label = Display On\:
page.panelTooltip.displayOn.label1 = Hover
page.panelTooltip.displayOn.label2 = Click
page.panelTooltip.displayOn.label3 = AltClick
page.panelTooltip.displayOn.label4 = DblClick
page.panelTooltip.moveWithMouse.label = Move With Mouse\: 
page.panelTooltip.draggable.label = Draggable
page.panelTooltip.city.label = City Names
page.panelTooltip.province1.label = Alberta
page.panelTooltip.province1.city1.label = Calgary
page.panelTooltip.province1.city2.label = Red Deer
page.panelTooltip.province1.city3.label = Lethbridge
page.panelTooltip.province1.city4.label = Medicine Hat
page.panelTooltip.province1.city5.label = Airdrie
page.panelTooltip.province2.label = Ontario
page.panelTooltip.province2.city1.label = Toronto
page.panelTooltip.province2.city2.label = Mississauga
page.panelTooltip.province2.city3.label = Hamilton
page.panelTooltip.province2.city4.label = Brampton
page.panelTooltip.province2.city5.label = London
page.panelTooltip.province3.label = Saskatchewan
page.panelTooltip.province3.city1.label = Saskatoon
page.panelTooltip.province3.city2.label = Regina
page.panelTooltip.province3.city3.label = Prince Albert
page.panelTooltip.province3.city4.label = Moose Jaw
page.panelTooltip.province3.city5.label = Yorkton
page.panelTooltip.province4.label = Nova Scotia
page.panelTooltip.province4.city1.label = Halifax
page.panelTooltip.province4.city2.label = Kings County
page.panelTooltip.province4.city3.label = Colchester County
page.panelTooltip.province4.city4.label = Lunenburg County
page.panelTooltip.province4.city5.label = Peggys Cove

# outputMedia
page.outputMedia.synopsis = The outputMedia component allows media content to be controlled by a backing bean value.
page.outputMedia.instructions = Use the radio buttons to dyanically change the object tags media source.
page.outputMedia.label = Media type\:
# --- DO NOT TRANSLATE BEGIN ---
page.outputMedia.flash.title = Flash
page.outputMedia.quicktime.title = QuickTime
page.outputMedia.windows.title = Windows
# --- DO NOT TRANSLATE END ---

# Set Event Phase Example
page.setEventPhase.instructions.text = Changing country selection triggers a city selection change
page.setEventPhase.subInstructions.text = Since ValueChangeEvents are broadcast before UPDATE_MODEL phase, it's difficult to make a valueChangeListener method affect the value of another input component, since the other input component's submitted value will be set into the bean in UPDATE_MODEL, overwriting any changes. A simple solution is to make the ValueChangeEvent be broadcast later, in the INVOKE_APPLICATION phase.
page.setEventPhase.enabledDisabled.text = When setEventPhase is enabled, changing the country should affect the selected cities. When disabled, stale city selections will remain, when a different country is selected
page.setEventPhase.enabled.label = Enabled
page.setEventPhase.disabled.label = Disabled
page.setEventPhase.server.country.label = Country\:
page.setEventPhase.server.cities.label = Cities\:

bean.setEventPhase.countryCities.label = Select country & cities\:
bean.setEventPhase.country1.value = Canada
bean.setEventPhase.country2.value = United States
bean.setEventPhase.country3.value = China
bean.setEventPhase.country4.value = United Kingdom
bean.setEventPhase.country5.value = Russia

bean.setEventPhase.country1.city1.value = Calgary
bean.setEventPhase.country1.city2.value = Vancouver
bean.setEventPhase.country1.city3.value = Toronto
bean.setEventPhase.country1.city4.value = Montreal
bean.setEventPhase.country1.city5.value = Ottawa

bean.setEventPhase.country2.city1.value = Seattle
bean.setEventPhase.country2.city2.value = San Francisco
bean.setEventPhase.country2.city3.value = Los Angeles
bean.setEventPhase.country2.city4.value = New York
bean.setEventPhase.country2.city5.value = Chicago

bean.setEventPhase.country3.city1.value = Beijing
bean.setEventPhase.country3.city2.value = Shanghai
bean.setEventPhase.country3.city3.value = Canton
bean.setEventPhase.country3.city4.value = Shenzhen
bean.setEventPhase.country3.city5.value = Hong Kong

bean.setEventPhase.country4.city1.value = London
bean.setEventPhase.country4.city2.value = Birmingham
bean.setEventPhase.country4.city3.value = Edinburgh
bean.setEventPhase.country4.city4.value = Liverpool
bean.setEventPhase.country4.city5.value = Cardiff

bean.setEventPhase.country5.city1.value = Moscow
bean.setEventPhase.country5.city2.value = St. Petersburg
bean.setEventPhase.country5.city3.value = Kaliningrad
bean.setEventPhase.country5.city4.value = Vladivostok
bean.setEventPhase.country5.city5.value = Volgograd

# length validator message overrides.
javax.faces.component.UIInput.REQUIRED=Input is required
javax.faces.validator.LengthValidator.MINIMUM=Enter no less than {0} characters
javax.faces.validator.LengthValidator.MAXIMUM=Enter no more than {0} characters

# -- start of common template decorator content --
template.common.icesoft = ICEsoft Technologies Inc.
template.common.icefaces = ICEfaces
# template footer include. 
template.footer.copyright = Copyright 2009&#160;
template.footer.poweredBy = Powered By&#160;
# template header include
template.header.componentShowcase.title = Component Suite Showcase
# template themes include
template.themes.paragraph1 = The ICEfaces Component Suite fully supports \
  customization of the appearance of each component via a set of predefined CSS \
  style classes. Changing the appearance or theme of a web application \
  developed with the ICEfaces Component Suite is as simple as changing the CSS \
  style sheet used to alter the definitions of the predefined style class \
  names used by the ICEfaces Component Suite components.
template.themes.paragraph2 = A set of predefined theme style sheets are \
  available to be used as-is, or customized to meet the specific requirements \
  of the application. In addition, individual components may override the \
  default style settings to achieve the specific look desired. It is even \
  possible to change the default styles dynamically and have the application \
  instantly adopt the new appearance.
template.themes.paragraph3 = To change the default CSS styles used by this \
  application select the desired style theme using the configuration panel at \
  the top-left corner.
# template splash page include
template.splash.description1 = The ICEfaces Component Suite provides a complete\
   set of enhanced standard and custom JavaServer Faces (JSF) components. These \
  components provide the following additional benefits over other JSF components:
template.splash.description1.list1 = Optimized to fully leverage ICEfaces \
  Direct-to-Dom rendering technology providing seamless incremental \
  user-interface updates for all components without full-page refreshes \
  (partial-page rendering).
template.splash.description1.list2 = Support for additional attributes for \
  ICEfaces-specific features such as effects, partialSubmit, renderedOnUserRole, etc.
template.splash.description1.list3 = Support for comprehensive component styling \
  via predefined component style sheets that are easily customized.
template.splash.description2 = Using the ICEfaces Component Suite complete JSF \
  applications may be rapidly developed that fully leverage the rich \
  application features that ICEfaces provides:
template.splash.description2.list1 = Smooth, incremental page updates without \
  full-page refreshes.
template.splash.description2.list2 = Asynchronous server-initiated \
  user-interface updates without polling.
template.splash.description2.list3 = Rich AJAX-enabled web applications with \
  no JavaScript development required.
template.splash.description2.list4 = User context preservation during page \
  update, including scrollbar positioning and user focus.
template.splash.description2.list5 = Fine-grained user interaction during form \
  entry that augments the standard submit/response loop.
